--USE eTrade
--------------------------------| SELECT |-----------------------------------------
--# SELECT  -* OR COL/COLS NAME- FROM -TABLE NAME-

--SELECT *

--FROM CUSTOMERS

--SELECT 
--[ID], [CUSTOMERNAME], [CITY], [BIRTHDATE], [DISTRICT], [GENDER], [FATHERS NAME] -- The purpose of using [] if column name has space in it to avoid an error

--FROM CUSTOMERS

--------------------------------| INSERT |-----------------------------------------
-- INSERT INTO -TABLE NAME- (COL1, COL2.. COLn) VALUES (VAL1, VAL2... VALn)

--INSERT INTO CUSTOMERS
--(CUSTOMERNAME,CITY,BIRTHDATE,DISTRICT,GENDER)
--VALUES
--('MEHMET OZAL','ANTALYA','1990-12-21','ALANYA','E')

--DELETE FROM CUSTOMERS WHERE ID=1006

--------------------------------| UPDATE |-----------------------------------------
--# UPDATE -TABLE NAME- SET -COL1=VAL1...- WHERE -CONDITION-

--UPDATE CUSTOMERS SET NATION='TR'
--ALTER TABLE CUSTOMERS ADD AGE INT NULL
--UPDATE CUSTOMERS SET AGE=DATEDIFF(YEAR,BIRTHDATE,GETDATE())
--UPDATE CUSTOMERS SET GENDER= 'ERKEK' WHERE GENDER='E'
--UPDATE CUSTOMERS SET GENDER= 'KADIN' WHERE GENDER='K'

--------------------------------| DELETE |-----------------------------------------
--## DELETE FROM CUSTOMERS  --THIS WILL DELETE ALL TABLE BUT WHEN YOU ADD A NEW ROW IT'LL CONTINUE FROM LAST
						  -- INDEX LIKE IT HASN'T BEEN DELETED

--## DELETE FROM CUSTOMERS WHERE -CONDITION/S-
-- DELETE FROM CUSTOMERS WHERE INDEX=1006

--------------------------------| TRUNCATE |-----------------------------------------
--## TRUNCATE TABLE -TABLE NAME-  -- THIS WILL RESET THE TABLE AND IT'S FASTER THAN DELETE
--TRUNCATE TABLE CUSTOMERS

--------------------------------| WHERE |-----------------------------------------
--## =, <> , < , > , <= , >= , BETWEEN , LIKE , IN , NOT LIKE , NOT IN

--SELECT * FROM CUSTOMERS

-- WHERE CITY = 'ÝSTANBUL'
-- WHERE CITY <> 'ÝZMÝR'    --OR  WHERE NOT CITY ='ÝZMÝR'
-- WHERE BIRTHDATE >'1990-01-01'  --OR BIRTHDATE='19900101'
-- WHERE BIRTHDATE BETWEEN '19890101' AND '19990101'
-- WHERE AGE BETWEEN 22 ANAD 30
-- WHERE CUSTOMERNAME LIKE "ALÝ%"  -- THIS MEANS THE NAME START WITH ALÝ
-- WHERE CUSTOMERNAME LIKE "%ALÝ"  -- THIS MEANS THE NAME END WITH ALÝ
-- WHERE CUSTOMERNAME LIKE "%ALÝ%"  -- THIS MEANS THE NAME CONTAÝN ALÝ IN IT
-- WHERE CUSTOMERNAME NOT LIKE "ALÝ%"  -- THIS MEANS THE NAME DO NOT START WITH ALÝ
-- WHERE CITY IN ('ÝSTANBUL','ANKARA')
--WHERE CITY NOT IN ('ÝSTANBUL','ANKARA')
--WHERE CITY='ÝSTANBUL' AND DISTRICT='ÜSKÜDAR' OR DISTRICT='SARIYER' AND AGE<45

--------------------------------| DISTINCT |-----------------------------------------
-- TO AVOID REPETITIVE DATA (ID,NAME ETC.)
-- SELECT DISTINCT COL1 COL2.. COLn FROM -TABLE NAME- WHERE -CONDITIONS-
--SELECT DISTINCT CITY FROM CUSTOMERS 
-- SELECT DISTINCT GENDER FROM CUSTOMERS
--SELECT DISTINCT AGE FROM CUSTOMERS 


--------------------------------| ORDER BY |-----------------------------------------

-- SELECT COL1, COL2,..COLn FROM -TABLE NAME- WHERE -CONDITIONS- ORDER BY COL1 ASC, COL2 DESC -- INSTEAD OF COLUMN NAME YOU CAN ALSO USE INDEX OF COLOUMN

--SELECT * FROM CUSTOMERS ORDER BY ID DESC
--SELECT * FROM CUSTOMERS ORDER BY CUSTOMERNAME ASC
-- SELECT * FROM CUSTOMERS ORDER BY AGE DESC
--SELECT * FROM CUSTOMERS WHERE AGE<45 ORDER BY CITY DESC,CUSTOMERNAME ASC 


--------------------------------| TOP |-----------------------------------------
-- SELECT TOP N COL1... FROM -TABLE NAME- WHERE -CONDITIONS-

--SELECT TOP 100 * FROM CUSTOMERS WHERE NOT CITY='ÝSTANBUL' ORDER BY CUSTOMERNAME DESC

                                
			     ----------------------------------------------
-----------------| AGGREGATE FUNCTIONS (SUM,MIN,MAX,AVG,COUNT) |-----------------------------------------
	             -----------------------------------------------
USE ETRADE2

--SELECT SUM (PRICE) FROM --TABLE NAME--
--SELECT AVG (PRICE) FROM --TABLE NAME--
--SELECT MAX (PRICE) FROM --TABLE NAME--
--SELECT MIN (PRICE) FROM --TABLE NAME--
--SELECT COUNT (ID) FROM --TABLE NAME--

--SELECT * FROM SALES
--SELECT COUNT(*) FROM SALES

--SELECT * FROM SALES ORDER BY AMOUNT DESC
--SELECT
--MIN(AMOUNT) AS MINIMUM, MAX(AMOUNT) AS MAXIMUM, 
--COUNT(ID) AS QUANTITY,SUM(AMOUNT) AS TOTAL,AVG(AMOUNT) AS AVERAGE 
--FROM SALES
--SELECT * FROM SALES ORDER BY TOTALPRICE
--SELECT  BRAND ,SUM(TOTALPRICE) AS TOTALPRICE FROM SALES GROUP BY BRAND ORDER BY SUM(TOTALPRICE) DESC

--SELECT
--MIN(AMOUNT) AS MINIMUM, MAX(AMOUNT) AS MAXIMUM, 
--COUNT(ID) AS QUANTITY,SUM(AMOUNT) AS TOTAL,AVG(AMOUNT) AS AVERAGE 
--FROM SALES WHERE CITY='ÝSTANBUL'


--------------------------------| GROUP BY |-----------------------------------------

--SELECT COL1.., SUM(),COUNT(),MIN(),MAX(),AVG() FROM -TABLE NAME- GROUP BY COL1,...

--SELECT
--CITY,MIN(AMOUNT) AS MINIMUM, MAX(AMOUNT) AS MAXIMUM, 
--COUNT(ID) AS QUANTITY,SUM(AMOUNT) AS TOTAL,AVG(AMOUNT) AS AVERAGE 
--FROM SALES GROUP BY CITY ORDER BY TOTAL DESC

--ALTER TABLE SALES ADD DAYS DATE  --ADDING A NEW COLUMN
--UPDATE SALES SET DAYS=CONVERT(DATE,DATE_)  --CONVERT(TIME,DATE_), CONVERT(DATETIME,DATE_)
--SELECT DAYS,SUM(AMOUNT) AS TOTAL_AMOUNT FROM SALES WHERE CITY='ÝSTANBUL' GROUP BY DAYS ORDER BY DAYS

--SELECT DAYS,CITY, SUM(AMOUNT) AS TOTAL_AMOUNT FROM SALES WHERE DAYS='20190106' GROUP BY CITY,DAYS ORDER BY TOTAL_AMOUNT DESC
--------------
--SELECT CONVERT(nvarchar(6), DAYS, 112),DAYS FROM SALES
--SELECT LEFT( DAYS,7),DAYS FROM SALES --SELECT LEFT(CONVERT(DATE, DAYS),7),DAYS FROM SALES
--ALTER TABLE SALES DROP COLUMN MONTHS
--ALTER TABLE SALES ADD MONTHS VARCHAR(7)
--UPDATE SALES SET MONTHS=CONVERT(nvarchar(7), DAYS)  OR UPDATE SALES SET MONTHS=DATEPART(MONTH,DAYS)
--------------

--######################################## EXAMPLES ######################################################
--SELECT  MONTHS,CITY, SUM(AMOUNT) AS TOTAL_AMOUNT FROM SALES GROUP BY MONTHS,CITY ORDER BY MONTHS,TOTAL_AMOUNT DESC
--SELECT  CATEGORY1,CATEGORY2 ,CATEGORY3,CATEGORY4 FROM SALES GROUP BY CATEGORY1,CATEGORY2 ,CATEGORY3,CATEGORY4
--SELECT  CITY,COUNT(DISTINCT CUSTOMERNAME) TOTAL_CLIENTS,COUNT(DISTINCT FICHENO) AS TOTAL_SHOP, COUNT(AMOUNT) ITEM_QUANTITY  FROM SALES GROUP BY CITY ORDER BY TOTAL_CLIENTS DESC 
--SELECT CITY,SUM(TOTALPRICE) AS TOTAL_PRICE,COUNT(DISTINCT CUSTOMERNAME) AS CUSTOMERNUMBER FROM SALES  GROUP BY CITY HAVING SUM(TOTALPRICE)>40000 AND COUNT(DISTINCT CUSTOMERNAME)>550 ORDER BY TOTAL_PRICE DESC